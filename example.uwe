0 := atoi "0";
1 := atoi "1";
2 := atoi "2";
4 := atoi "4";
n1 := atoi "-1";

[basics]
id := a -> a;
const := a -> b -> a;
ignore := a -> b -> b;
fix := f -> (x -> f (v -> x x v)) (x -> f (v -> x x v)); [Z combinator]
compose := f -> g -> x -> f (g x);
then := g -> f -> x -> f (g x);
rev := x -> f -> f x;
rev2 := x -> y -> f -> f x y;
if := scottBool;
let := rev;

$ := id;
. := compose;
& := then;

neg := n -> n `* n1;
constThunk := x -> thunkify (_ -> x);

[n-functions]

[constN 5 a b c d e f = a]
[ const(N) x y ... = const(N-1) x ... ]
[ const(N) x y = const(N-1) x ]
[ const(N) x = const (const(N-1) x) ]
constN := fix (self -> n -> x -> if (n `= 0) (constThunk x) (thunkify (_ -> (const `$ self (n `+ n1) x))));

[ignoreN 5 a b c d e f = f]
[ ignore(N) x ... z = ignore(N-1) ... z ]
[ ignore(N) x ... = ignore(N-1) ... ]
[ ignore(N) x = ignore(N-1) ]
[ ignore(N) = const ignore(N-1) ]
ignoreN := fix (self -> n -> if (n `= 0) (constThunk id) (thunkify (_ -> (const `$ self (n `+ n1)))));

[composeN 5 f g a b c d e = f (g a b c d e)]
[ compose(N) f g x ... = compose(N-1) f (g x) ... ]
composeN := n -> f -> fix (self -> n -> g -> if (n `= 0) (thunkify (_ -> f g)) (constThunk (x -> self (n `+ n1) (g x)))) n;

[revN 5 a b c d e f = f a b c d e]
[ rev(N) x ... f = rev(N-1) ... (f x) ]
[ rev(N) x ... = rev(N-1) ... . (`$ x) ]
[ rev(N) x ... = (`$ x) `& rev(N-1) ... ]
[ rev(N) x = ((`$ x) `&) `(composeN N-1) rev(N-1) ]
[ rev(N) x = (& (rev x)) `(composeN N-1) rev(N-1) ]
revN := fix (self -> n -> if (n `= 0) (constThunk id) (constThunk (x -> composeN (n `+ n1) (& (rev x)) (self (n `+ n1)))));

[nArgsPickMth 5 2 a b c d e = c]
nArgsPickMth := n -> m -> composeN (m `+ 1) (constN (n `+ neg m `+ n1)) (ignoreN m);

[applyN 5 x f = f x x x x x]
[ apply(N) x f = apply(N) x (f x) ]
applyN := n -> x -> fix (self -> n -> f -> if (n `= 0) (constThunk f) (thunkify (_ -> self (n `+ n1) (f x)))) n;

[maybe]
just := a -> f -> x -> f a;
nothing := f -> x -> force x;
fromMaybe := rev2 id;
scottMaybe := id;

[tuple]
tup := x -> y -> f -> f x y;
fst := rev const;
snd := rev ignore;
scottTuple := id;

[either]
left := x -> f -> g -> f x;
right := x -> f -> g -> g x;
scottEither := id;
isLeft := rev2 (const true) (const false);
isRight := not `. isLeft;
leftToMaybe := rev2 just (const nothing);
rightToMaybe := rev2 (const nothing) just;
fromLeft := leftToMaybe `& fromMaybe (constThunk "FAIL");
fromRight := rightToMaybe `& fromMaybe (constThunk "FAIL");

[nTup]
[ TODO use a tree structure for quicker lookup and assignment ]
nTup := revN;
nTupMth := n -> m -> rev `$ nArgsPickMth n m;
nTupAssignMth := "TODO";
scottNTup := const id;

[nSum]
[TODO these are untested]
nSumMthCtor := n -> m -> x -> composeN n (rev x) (nArgsPickMth n m);
nSumGetIdx := n -> fix (self -> m -> f -> if (n `= m) (constThunk f) (thunkify (_ -> self (n `+ 1) (f `$ const m)))) 0;
nSumIsMth := n -> m -> x -> nSumGetIdx n x `= m; [ TODO could in theory make more efficient but also who cares ]
nSumGetVal := n -> applyN n id;
nSumGetMth := n -> m -> x -> if (nSumIsMth n m x) (thunkify (_ -> nSumGetVal n x)) (constThunk nothing);
scottNSum := const id;

[list]
null := f -> x -> force x;
cons := h -> t -> f -> x -> f h t;
singleton := x -> x `cons null;
maybeHead := rev2 (h -> t -> just h) (constThunk nothing);
maybeTail := rev2 (h -> t -> just t) (constThunk nothing);
scottList := id;
churchList := l -> f -> x -> fix (self -> l -> l (h -> t -> f h (self t)) x) l;

[list functions, but independent of impl]
head := maybeHead `& fromMaybe (constThunk "FAIL");
tail := maybeTail `& fromMaybe (constThunk "FAIL");
reduce := f -> x -> l -> churchList l f (constThunk x);
map := f -> reduce (f `& cons) null;
filter := f -> reduce (h -> r -> if (f h) (thunkify (_ -> cons h r)) (constThunk r)) null;
len := reduce (h -> r -> r `+ 1) 0;
sumStrings := reduce + "";
sum := reduce + 0;
prod := reduce * 1;
isNull := l -> scottList l (const false) (constThunk true);

[uwecode repr]
[expr = lambda string expr | app expr expr | var string | str string | builtin a string appFn:(expr -> expr) subFn:(string -> expr -> expr) ]
[decl = (string, expr)]
lambda := s -> e -> f -> g -> h -> i -> j -> f s e;
app := a -> b -> f -> g -> h -> i -> j -> g a b;
var := s -> f -> g -> h -> i -> j -> h s;
str := s -> f -> g -> h -> i -> j -> i s;
builtin := a -> strRepr -> appFn -> subFn -> f -> g -> h -> i -> j -> j a strRepr appFn subFn;
decl := tup;
scottExpr := id;
scottDecl := scottTuple;

[assumes we're at the top level (no free variables when we start); assumption is untrue when you add global vars TODO]
subst := var -> sub -> fix (self -> expr -> scottExpr expr
  [lambda s e] (s -> e -> lambda s `$ if (var `= s) (constThunk e) (thunkify (_ -> self e)) )
  [app a b] (a -> b -> self a `app self b)
  [var s] (s -> if (var `= s) (constThunk sub) (constThunk expr) )
  [str _] (const expr)
  [builtin a strRepr appFn subFn] (a -> strRepr -> appFn -> subFn -> subFn var sub));

stepExpr := fix (self -> expr -> scottExpr expr
  [lambda _ _] (constN 2 `$ false `tup expr)
  [app a b] (a -> b -> self a `let (aSimpl ->
               if (fst aSimpl) (thunkify (_ -> (true `tup snd aSimpl `app b))) (thunkify (_ -> (self b `let (bSimpl ->
               if (fst bSimpl) (thunkify (_ -> (true `tup a `app snd bSimpl))) (thunkify (_ -> ( scottExpr a
                   [lambda s e] (s -> e -> true `tup subst s b e)
                   [app _ _] (constN 2 `$ false `tup a `app b)
                   [var _] (const `$ false `tup a `app b)
                   [str _] (const `$ false `tup a `app b)
                   [builtin x strRepr appFn subFn] (x -> strRepr -> appFn -> subFn -> true `tup appFn b))))))))))
  [var _] (const `$ false `tup expr)
  [str _] (const `$ false `tup expr)
  [builtin _ _ _ _] (constN 4 `$ false `tup expr));

fullyEvalExpr := fix (self -> expr -> stepExpr expr `let (simpl -> if (fst simpl) (thunkify (_ -> (self `$ snd simpl))) (constThunk `$ snd simpl)));

printExpr := fix (self -> expr -> scottExpr expr
  [lambda s e] (s -> e -> "(" `+ s `+ " -> " `+ self e `+ ")" )
  [app a b] (a -> b -> "(" `+ self a `+ " " `+ self b `+ ")" )
  [var s] (s -> s)
  [str s] (s -> doubleQuote `+ s `+ doubleQuote)
  [builtin a strRepr appFn subFn] (a -> strRepr -> appFn -> subFn -> strRepr));

[temp jank]

stringHead := s -> substring s 0 1;
stringTail := s -> substring s 1 (strlen s);
stringToList := fix (self -> s -> if (strlen s `= 0) (constThunk null) (thunkify (_ -> stringHead s `cons self (stringTail s))));
[charInString := s -> c -> fix (self -> s -> if (strlen s `= 0) (constThunk false) (thunkify (_ -> if (stringHead s `= c) (constThunk true) (thunkify (_ -> self `$ stringTail s))))) s;]
charInString := s -> c -> not `$ (s `strfind c) `= n1;

[foldl := f -> fix (self -> x -> l -> if (isNull l) (constThunk x) (thunkify (_ -> self (x `f head l) (tail l))));]
foldl := f -> fix (self -> x -> l -> scottList l (h -> t -> self (f x h) t) (constThunk x));
foldlNonempty := f -> l -> foldl f (head l) (tail l);

[parser]

[parser x = string -> maybe (x, string)]

parseCharSat      := cf -> s -> if (s `= "") (constThunk nothing) `$ thunkify (_ -> stringHead s `let (strHead -> if (cf strHead) (thunkify (_ -> (just (strHead `tup stringTail s)))) (constThunk nothing)));
parseChar         := c -> parseCharSat (= c);
parsePure         := x -> s -> just (force x `tup s);
parseMap          := f -> p -> s -> scottMaybe (p s) (v -> just (f (fst v) `tup snd v)) (constThunk nothing);
parseApp          := pf -> px -> s -> scottMaybe (pf s) (f -> scottMaybe (px `$ snd f) (x -> just (fst f (fst x) `tup snd x)) (constThunk nothing)) (constThunk nothing);
parseBind         := pa -> fb -> s -> scottMaybe (pa s) (a -> fb (fst a) (snd a)) (constThunk nothing);
parseThen         := pa -> pb -> parseBind pa (const pb);
parseThenL        := pa -> pb -> parseBind pa (x -> pb `parseThen parsePure (constThunk x));
parseOr           := pa -> pb -> s -> scottMaybe (pa s) just (thunkify (_ -> pb s));
parseMany         := p -> fix (self -> ((cons `parseMap p) `parseApp self) `parseOr parsePure (constThunk null));
parseManyOne      := p -> (cons `parseMap p) `parseApp parseMany p;
parseList         := reduce (p -> l -> (cons `parseMap p) `parseApp l) (parsePure `$ constThunk null);
parseString       := parseMap sumStrings `. parseList `. map parseChar `. stringToList;
parseCharsSat     := cf -> sumStrings `parseMap parseManyOne (parseCharSat cf);
parseTup          := pa -> pb -> (tup `parseMap pa) `parseApp pb;
parseManyOneDelim := p -> pd -> fix (self -> ((cons `parseMap p `parseThenL pd) `parseApp self) `parseOr parseMap singleton p);

[parser for uwecode]
[ TODO parseVar and parseMidVar should also have ' in the list, took out for temp string lits ]
[parseVar := parseCharsSat `$ charInString "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!@#$%^&*+=_|'<>,./?";
parseMidVar := parseChar "`" `parseThen parseCharsSat `$ charInString "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!@#$%^&*+=_|'<>,./?";]
parseVar := parseCharsSat `$ charInString "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!@#$%^&*+=_|<>,./?";
parseMidVar := parseChar "`" `parseThen parseCharsSat `$ charInString "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!@#$%^&*+=_|<>,./?";
parseSemi := parseChar ";";
parseColonEquals := parseString ":=";
parseArrow := parseString "->";
parseLParen := parseChar "(";
parseRParen := parseChar ")";
parseStringLit := parseChar "'" [doubleQuote] `parseThen parseCharsSat (not `. = "'" [doubleQuote]) `parseThenL parseChar "'" [doubleQuote];
parseOneWhitespace := parseCharSat `$ charInString (" 	" `+ newline);
parseMaybeWhitespace := parseMany parseOneWhitespace;
parseWhitespace := parseManyOne parseOneWhitespace;

thenMW := p -> p `parseThenL parseMaybeWhitespace;

makeParseLam := parseExpr -> (lambda `parseMap thenMW parseVar `parseThenL thenMW parseArrow) `parseApp parseExpr;
[makeParseExpr1] parseExpr1 := [parseExpr -> parseExpr2 ->] s -> (makeParseLam parseExpr `parseOr parseExpr2) s;

makeParseMidapp := parseExpr2 -> parseExpr3 -> s -> ((((a -> b -> c -> (var b `app a) `app c) `parseMap thenMW parseExpr3) `parseApp thenMW parseMidVar) `parseApp parseExpr2) s;
[makeParseExpr2] parseExpr2_ := [parseExpr2 -> parseExpr3 ->] s -> (makeParseMidapp parseExpr2 parseExpr3 `parseOr parseExpr3) s;

parseExpr2 := s -> (parseExpr3 `parseBind (a -> (((b -> c -> (var b `app a) `app c) `parseMap parseMaybeWhitespace `parseThen thenMW parseMidVar) `parseApp parseExpr2) `parseOr parsePure (constThunk a))) s;

[makeParseExpr3] parseExpr3 := [parseExpr4 ->] s -> (foldlNonempty app `parseMap parseManyOneDelim parseExpr4 parseMaybeWhitespace) s;

parseVarExpr := var `parseMap parseVar;
makeParseParenExpr := parseExpr -> thenMW parseLParen `parseThen thenMW parseExpr `parseThenL parseRParen;
parseStringLitExpr := str `parseMap parseStringLit;
[makeParseExpr4] parseExpr4 := [parseExpr ->] s -> (parseVarExpr `parseOr makeParseParenExpr parseExpr `parseOr parseStringLitExpr) s;

parseExpr := parseExpr1; [fix (self -> s -> (fst (fst self) `let (e1 -> snd (fst self) `let (e2 -> fst (snd self) `let (e3 -> snd (snd self) `let (e4 -> (makeParseExpr1 e1 e2 `tup makeParseExpr2 e2 e3) `tup (makeParseExpr3 e4 `tup makeParseExpr4 e1)))))) s);]

[main := scottMaybe (makeParseParenExpr parseExpr "((((( x )))))") (printExpr `. fst) (constThunk "fail"); WORKS]
[main := scottMaybe (parseExpr "x `y z `a b") (printExpr `. fst) (constThunk "fail"); WORKS]
[main := scottMaybe (parseExpr "x -> y") (printExpr `. fst) (constThunk "fail"); WORKS]
main := scottMaybe (parseExpr "((x)) `y (z -> a `b c `d e `f 'g' 'h' (i))") (printExpr `. fst) (constThunk "fail");
